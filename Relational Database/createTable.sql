

CREATE TABLE USER_INFOR(
	USER_ID VARCHAR2(100) NOT NULL,
 	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH NUMBER(38),
	MONTH_OF_BIRTH NUMBER(38),
	DATE_OF_BIRTH NUMBER(38),
	GENDER VARCHAR2(100),
	PRIMARY KEY(USER_ID)
	);

CREATE TABLE LOCATION(
	LOCATION_ID INTEGER,
	CITY VARCHAR2(100),
	STATE VARCHAR2(100),
	COUNTRY VARCHAR2(100),
	PRIMARY KEY(LOCATION_ID),
	UNIQUE(CITY,STATE,COUNTRY)
);

CREATE SEQUENCE loc_sequence START WITH 1
INCREMENT BY 1;

CREATE TRIGGER loc_trigger
BEFORE INSERT ON LOCATION 
FOR EACH ROW
BEGIN
SELECT loc_sequence.nextval into :new.LOCATION_ID from dual; 
END;
.
RUN;



CREATE TABLE CURRENT_LOCATION(
	USER_ID VARCHAR2(100),
	LOCATION_ID INTEGER,
	PRIMARY KEY(USER_ID,LOCATION_ID),
	FOREIGN KEY (USER_ID) REFERENCES USER_INFOR ON DELETE CASCADE , 
	FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION
	);

CREATE TABLE HOMETOWN_LOCATION(
	USER_ID VARCHAR2(100),
	LOCATION_ID INTEGER,
	PRIMARY KEY(USER_ID,LOCATION_ID),
	FOREIGN KEY (USER_ID) REFERENCES USER_INFOR ON DELETE CASCADE , 
	FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION
	);

CREATE TABLE COLLEGE_PROGRAM(
	PROGRAM_ID INTEGER,
	INSTITUTION_NAME VARCHAR2(100),
	DEGREE VARCHAR2(100),
	CONCENTRATION CHAR(100),
	PRIMARY KEY (PROGRAM_ID),
	UNIQUE(INSTITUTION_NAME,DEGREE,CONCENTRATION)
);

CREATE SEQUENCE college_sequence START WITH 1
INCREMENT BY 1;

CREATE TRIGGER college_trigger BEFORE INSERT ON COLLEGE_PROGRAM
FOR EACH ROW
BEGIN

SELECT college_sequence.nextval into :new.PROGRAM_ID from dual;
END;
.
RUN;

CREATE TABLE ATTENDED(
	USER_ID VARCHAR2(100),
	PROGRAM_ID INTEGER,
	GRADUATION_YEAR NUMBER(38),
	PRIMARY KEY (USER_ID,PROGRAM_ID),
	FOREIGN KEY (USER_ID) REFERENCES USER_INFOR ON DELETE CASCADE,
	FOREIGN KEY (PROGRAM_ID) REFERENCES COLLEGE_PROGRAM ON DELETE CASCADE);

CREATE TABLE FRIEND_OF(
	USER_ID1 VARCHAR2(100),
	USER_ID2 VARCHAR2(100),
	PRIMARY KEY (USER_ID1,USER_ID2),
	FOREIGN KEY (USER_ID1) REFERENCES USER_INFOR ON DELETE CASCADE,
	FOREIGN KEY (USER_ID2) REFERENCES USER_INFOR ON DELETE CASCADE
	);

CREATE TABLE ALBUM_BELONG(
	ALBUM_ID VARCHAR2(100),
	OWNER_ID VARCHAR2(100) NOT NULL,
	ALBUM_NAME VARCHAR2(100) NOT NULL,
	ALBUM_LINK VARCHAR2(200) NOT NULL,
	COVER_PHOTO_ID VARCHAR2(100) NOT NULL,
	ALBUM_CREATED_TIME TIMESTAMP(6) NOT NULL,
	ALBUM_MODIFIED_TIME TIMESTAMP(6) NOT NULL,
	ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
	PRIMARY KEY (ALBUM_ID),
	FOREIGN KEY(OWNER_ID) REFERENCES USER_INFOR ON DELETE CASCADE,
	CONSTRAINT chk_Visibility CHECK(
	(ALBUM_VISIBILITY='EVERYONE')OR
	(ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS')OR     	   	   (ALBUM_VISIBILITY = 'FRIENDS')OR
	(ALBUM_VISIBILITY = 'MYSELF')OR
	(ALBUM_VISIBILITY = 'CUSTOM')))
	;

CREATE TABLE PHOTO(
	PHOTO_ID VARCHAR2(100) NOT NULL,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATE_TIME TIMESTAMP(6) NOT NULL,
	PHOTO_MODIFIED_TIME TIMESTAMP(6) NOT NULL,
	PHOTO_LINK VARCHAR2(2000) NOT NULL,
	ALBUM_ID VARCHAR2(100) NOT NULL,
	PRIMARY KEY (PHOTO_ID)
	);


ALTER TABLE ALBUM_BELONG ADD CONSTRAINT ALBUM_BELONGRefsPHOTO 
 	FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTO 
	INITIALLY DEFERRED DEFERRABLE;
ALTER TABLE PHOTO ADD CONSTRAINT PHOTORefsALBUM_BELONG
	 FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM_BELONG ON DELETE 		 CASCADE
	 INITIALLY DEFERRED DEFERRABLE;


CREATE TABLE TAG(
	PHOTO_ID VARCHAR2(100) NOT NULL,
	TAG_SUBJECT_ID VARCHAR2(100) NOT NULL,
	TAG_CREATED_TIME TIMESTAMP(6) NOT NULL,
	TAG_X_COORDINATE NUMBER NOT NULL,
	TAG_Y_COORDINATE NUMBER NOT NULL,
	PRIMARY KEY (PHOTO_ID,TAG_SUBJECT_ID),
	FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO ON DELETE CASCADE,
	FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USER_INFOR ON DELETE CASCADE
	);

CREATE TABLE MESSAGE (
	MESSAGE_ID INTEGER,
	MESSAGE_CONTENT VARCHAR(2000),
	PRIMARY KEY (MESSAGE_ID)
	);


CREATE SEQUENCE message_sequence START WITH 1
INCREMENT BY 1;

CREATE TRIGGER message_trigger BEFORE INSERT ON MESSAGE
FOR EACH ROW
BEGIN

SELECT message_sequence.nextval into :new.MESSAGE_ID from dual;
END;
.
RUN;

CREATE TABLE SEND_RECEIVE_MESSAGE(
    SENDER_ID VARCHAR2(100),
    RECEIVER_ID VARCHAR2(100),
    MESSAGE_ID INTEGER,
    SENT_TIME TIMESTAMP(6),
    PRIMARY KEY(SENDER_ID, RECEIVER_ID, MESSAGE_ID),
    FOREIGN KEY(SENDER_ID) REFERENCES USER_INFOR(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY(RECEIVER_ID) REFERENCES USER_INFOR(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY(MESSAGE_ID) REFERENCES MESSAGE ON DELETE CASCADE
);

CREATE TABLE EVENT(
    EVENT_ID VARCHAR2(100),
    EVENT_CREATOR_ID VARCHAR2(100) NOT NULL,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE VARCHAR2(1000),
    EVENT_DESCRIPTION VARCHAR2(4000),
    EVENT_TYPE VARCHAR2(100) NOT NULL,
    EVENT_HOST VARCHAR2(100) NOT NULL,
    EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
    EVENT_LOCATION VARCHAR2(200) NOT NULL,
    EVENT_START_TIME TIMESTAMP(6) NOT NULL,
    EVENT_END_TIME TIMESTAMP(6) NOT NULL,
    PRIMARY KEY(EVENT_ID),
    FOREIGN KEY(EVENT_CREATOR_ID) REFERENCES USER_INFOR(USER_ID) ON DELETE SET NULL
);

CREATE TABLE EVENT_PARTICIPATE(
    PARTICIPANT_ID VARCHAR2(100),
    EVENT_ID VARCHAR2(100),
    STATUS VARCHAR2(100) NOT NULL,
    PRIMARY KEY(PARTICIPANT_ID, EVENT_ID),
    FOREIGN KEY(PARTICIPANT_ID) REFERENCES USER_INFOR(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY(EVENT_ID) REFERENCES EVENT ON DELETE CASCADE
);

CREATE TABLE EVENT_AT(
    EVENT_ID VARCHAR2(100),
    LOCATION_ID INTEGER,
    PRIMARY KEY(EVENT_ID, LOCATION_ID),
    FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION,
    FOREIGN KEY(EVENT_ID) REFERENCES EVENT ON DELETE CASCADE
);


